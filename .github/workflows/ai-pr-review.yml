name: Reusable PR AI Review

on:
  workflow_call:
    inputs:
      model:
        description: "기본 모델"
        required: false
        type: string
        default: "gpt-4.1-mini"
      run_on_fork:
        description: "포크 PR에서도 실행"
        required: false
        type: boolean
        default: false
      max_patch_per_file:
        description: "파일당 patch 최대 길이(문자)"
        required: false
        type: number
        default: 4000

permissions:
  contents: read
  pull-requests: write

jobs:
  guard-fork:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.head.repo.fork && inputs.run_on_fork == false }}
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "🔒 보안상 포크 PR에서는 AI 코드리뷰가 자동 실행되지 않습니다. 필요 시 Maintainer가 내부 브랜치에서 재오픈하거나 `run_on_fork: true`로 호출하세요."
            });

  review:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ !(github.event.pull_request.head.repo.fork && inputs.run_on_fork == false) }}
    concurrency:
      group: ${{ github.repository }}-ai-review-pr-${{ github.event.pull_request.number }}
      cancel-in-progress: true
    steps:
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: AI Review (summary comment)
        uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL_DEFAULT: ${{ inputs.model }}
          MAX_PATCH_PER_FILE: ${{ inputs.max_patch_per_file }}
        with:
          script: |
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pull_number = pr.number;

            // 1) 변경 파일 목록(+patch) 수집
            const files = await github.paginate(github.rest.pulls.listFiles, { owner, repo, pull_number });
            const maxPerFile = Number(process.env.MAX_PATCH_PER_FILE || 4000);
            const binRe = /\.(png|jpg|jpeg|gif|svg|webp|mp4|mov|mp3|wav|zip|tgz|gz|pdf|ico)$/i;
            const lockRe = /(package-lock\.json|pnpm-lock\.yaml|yarn\.lock)$/i;

            const diffs = [];
            let rn=false, sb=false, fa=false;

            for (const f of files) {
              const path = (f.filename || "").toLowerCase();
              if (binRe.test(path) || lockRe.test(path)) continue;
              if (!f.patch) continue;

              if (/\.(tsx|jsx|ts|js)$/.test(path) || path.startsWith("android/") || path.startsWith("ios/")) rn = true;
              if (/\.(java|kt|xml)$/.test(path) || /(pom\.xml|build\.gradle(\.kts)?$)/.test(path) || path.includes("src/main/")) sb = true;
              if (/\.py$/.test(path) || /(requirements\.txt|pyproject\.toml)$/.test(path)) fa = true;

              const patch = String(f.patch).slice(0, maxPerFile);
              diffs.push(`# ${f.filename}\n\`\`\`diff\n${patch}\n\`\`\``);
            }

            if (diffs.length === 0) {
              await github.rest.issues.createComment({
                owner, repo, issue_number: pull_number,
                body: "ℹ️ 변경된 코드 패치가 없거나(또는 전부 무시됨) 리뷰가 생략되었습니다."
              });
              return;
            }

            // 2) 스택별 가이드 결합
            const shared = [
              "You are a senior software engineer reviewing a pull request.",
              "Output sections: 1) Summary 2) Critical issues (with minimal diff patches) 3) Major 4) Minor 5) Tests 6) Security/Performance.",
              "Review only changed hunks; avoid restating the diff. Be specific and actionable.",
              "If context is missing or the diff was truncated, state assumptions briefly.",
              "Keep it concise (≈250–400 words total).",
              "Always respond in Korean."
            ].join("\n");

            const rnGuide = rn ? [
              "React Native — FSD/Emotion-Native checklist",
              "- Follow FSD boundaries under src/: app=routes/layout only; shared=reusable(ui/hooks/lib) only; entities=domain-only; features=compose entities+shared; widgets=UI composition.",
              "- Modularize repeated logic/components: extract to shared/ui, shared/hooks, or shared/lib; prefer small, reusable utilities/components.",
              "- Styling (@emotion/native): use styled components with theme tokens and simple variant props (e.g., <Button primary />); compose with React Native style arrays ([base, cond && extra]); avoid recreating style objects inside render when possible; keep styles co-located but separate from business logic.",
              "- Error handling: avoid blanket try/catch; implement and reuse a central error handler/hook that logs safely (no PII) and surfaces clear, user-facing messages.",
              "Prioritize high-impact findings; avoid nitpicks that don’t affect correctness or clarity.",
            ].join("\n") : "";

            const sbGuide = sb ? [
              "### Spring Boot 가이드",
              "### Spring Boot 코드리뷰 가이드",
            "",
            "#### 1) 구조/경계",
            "- Controller ⇢ DTO 변환·입력 검증 중심, 비즈니스 로직은 Service.",
            "- Service ⇢ 유스케이스·트랜잭션 경계. Repository ⇢ 순수 DB 접근.",
            "- 순환 의존 금지, 도메인/애플리케이션 경계 명확화.",
            "",
            "#### 2) 트랜잭션",
            "- `@Transactional`은 Service에 선언: 기본 `readOnly=true`, 쓰기 작업에만 쓰기 트랜잭션.",
            "- 전파: 기본 `REQUIRED`, 분리 필요 시 `REQUIRES_NEW`. self-invocation 이슈 주의.",
            "- 긴 트랜잭션 내부에서 외부 I/O 금지(타임아웃·락 교착 위험).",
            "",
            "#### 3) 검증",
            "- `@Valid/@Validated` 사용, 바인딩/검증 실패는 `@ControllerAdvice`로 표준 오류 변환.",
            "- 입력 DTO에 제약 명시(길이/패턴/범위), 서버단 재검증 필수.",
            "",
            "#### 4) 예외 & try-catch",
            "- 광범위 `catch (Exception)` 지양. 회복 가능/불가능 예외 구분.",
            "- 예외 삼키지 말 것: *로그 + 도메인 예외 변환* (`ErrorCode`, `ApiResponseDTO`).",
            "- 동일 예외 다중 로깅 금지(스택트레이스는 한 번). 로그 레벨 기준 합의 준수.",
            "- 자원 관리: 파일/스트림/커서 등은 *try-with-resources*로 확실히 닫기.",
            "- `finally`에서 트랜잭션 제어 금지(롤백/커밋 X).",
            "- 외부호출 실패 시 원인(`status/body`)을 보존해 래핑, 민감정보는 마스킹.",
            "- 샘플: `try { ... } catch (SpecificEx e) { log.warn(\"...\", e); throw new CustomException(ErrorCode.XYZ, e); }`",
            "",
            "#### 5) 데이터 접근/JPA (N+1/Lazy)",
            "- N+1 탐지: fetch join / `@EntityGraph` / `hibernate.default_batch_fetch_size`.",
            "- DTO 프로젝션 적극 사용. 페이징 시 count 쿼리/성능 검증.",
            "- 트랜잭션 경계 밖 지연 로딩 금지. 연관관계의 주인·`equals/hashCode` 규칙 준수.",
            "- 인덱스/유니크 제약은 DDL로 명시(Flyway/Liquibase).",
            "",
            "#### 6) 외부호출/회복탄력성",
            "- WebClient/RestTemplate: connect/read 타임아웃 필수.",
            "- Resilience4j: CircuitBreaker/Retry(지수 백오프)/RateLimiter/Bulkhead 적용 근거 확인.",
            "- 재시도는 멱등 연산에만. 재시도 간 최대 대기/시도 수 제한.",
            "",
            "#### 7) 인증/인가/보안",
            "- SecurityFilterChain으로 인증/인가 분리, `@PreAuthorize` 등 메서드 보안 병행.",
            "- 토큰·비밀번호·키 등 민감정보 로그 금지, 필드 마스킹.",
            "- CORS 최소화·보안 헤더(CSP/X-Content-Type-Options/Referrer-Policy) 검토.",
            "",
            "#### 8) 로그/관측성",
            "- MDC(요청ID/사용자ID) 설정, 단계별 레벨 정책(TRACE/DEBUG/INFO/WARN/ERROR).",
            "- Micrometer 메트릭/트레이싱, 슬로우쿼리·GC 모니터링 체크.",
            "",
            "#### 9) 설정/프로파일",
            "- `application-{dev,stage,prod}.yml` 분리, 비밀은 환경변수/Secrets Manager.",
            "- `@ConfigurationProperties` 사용, 하드코딩/매직넘버 제거.",
            "",
            "#### 10) API 규약",
            "- REST 자원/상태코드 일관성, 표준 응답(`ApiResponseDTO`)과 `ErrorCode` 매핑.",
            "- 페이지네이션/정렬/필터 파라미터 표준화, 입력 크기 제한, 업로드 `Content-Type` 검증.",
            "- 멱등성 보장(중복요청 방지 키/Idempotency-Key) 고려.",
            "",
            "#### 11) 테스트/문서",
            "- 단위(@ExtendWith), 슬라이스(@DataJpaTest/@WebMvcTest), 통합(Testcontainers) 구분.",
            "- Given-When-Then 명확화, 고립된 단위테스트에서 목/스텁 구분.",
            "- OpenAPI(Swagger) 주석/예제 동기화, 성공/오류 예시 포함.",
            "",
            "#### 12) 시간/국제화",
            "- 서버/DB는 UTC, 표현은 Locale/Zone 명시(`ZonedDateTime`). 포맷 일관성.",
            "",
            "#### 13) 리뷰 출력 포맷(피드백 톤)",
            "- 🔴 Critical | 🟡 Improvement | 🟢 Nitpick",
            "- 수정 전/후 코드 스니펫 + 근거(가이드/레퍼런스) 함께 제시.",
            "",
            "#### 14) 출력량 제한",
            "- 리뷰가 너무 길어질 경우 **핵심 이슈 중심 요약**으로 답변.",
            "- 각 섹션당 2~3줄 요약 권장, 불필요한 반복은 생략.",
            ].join("\n") : "";

            const faGuide = fa ? [
              "FastAPI — Starter rules",
              "- Thin routers → services → models; Pydantic at I/O edges.",
              "- Depends for db/session/settings; no globals.",
              "- Central exception handlers; no blanket try/except.",
              "- DB session per request; avoid N+1; paginate.",
              "- Auth/CORS/limits; no secrets/PII in logs.",
              "- Env config; DEBUG off in prod.",
              "Prioritize high-impact findings; skip non-blocking nits."
            ].join("\n") : "";

            const nestGuide = [
              "- Structure: Keep features isolated: `/src/<feature>/{module,controller,service,dto}`. Controllers stay thin (binding/auth/validation only); business logic lives in services. Use DTO barrel exports and avoid cross-feature imports.",
              "- Types & Style: Strict TypeScript, avoid `any`, declare return types, keep functions small, extract pure helpers.",
              "",
              "Validation & Upload",
              "- Enable global `ValidationPipe({ transform:true, whitelist:true, forbidNonWhitelisted:true })`.",
              "- File upload: `@UseInterceptors(FileInterceptor('audio', { limits:{ fileSize: 25*1024*1024 } }))`.",
              "- Add `ParseFilePipe` with `MaxFileSizeValidator(25MB)` and `FileTypeValidator` for `audio/wav|mpeg|mp4|x-m4a|flac`.",
              "- Map oversize to **413** and unsupported media to **415**. Text fields in multipart arrive via `@Body()` DTO.",
              "",
              "Config & Secrets",
              "- Use `@nestjs/config` with schema validation (zod/joi). Do not read `process.env` directly in business code.",
              "- Start with deny-by-default CORS; allow-list per environment. Apply `helmet` for common security headers.",
              "",
              "External Calls (OpenAI) & Resilience",
              "- Inject the OpenAI SDK via a singleton provider; never `new` it inside services.",
              "- Use `toFile(buffer, originalname, { type: mimetype })`. Default model: `gpt-4o-mini-transcribe`; expose `language`, `prompt`, `model` as options.",
              "- Set timeouts and exponential backoff for **429/5xx**; map failures to safe `HttpException`s.",
              "- Keep response shape stable: `{ text, durationMs?, model? }` (trim text; guard against null).",
              "",
              "Swagger (Practical)",
              "- Build with title/description/version and a `servers` entry (e.g., `http://localhost:3000`).",
              "- Security: `.addSecurity('ApiKeyAuth', { type:'apiKey', in:'header', name:'x-api-key' }).addSecurityRequirements('ApiKeyAuth')` (or `.addBearerAuth()` if using JWT).",
              "- Uploads: `@ApiConsumes('multipart/form-data')` + `@ApiBody({ type: SttUploadReqDto })`.",
              "- Responses: `@ApiOkResponse({ type: SttResDto, description: 'Transcription success', examples: { default: { value: { text: 'Hello', durationMs: 532, model: 'gpt-4o-mini-transcribe' }}}})`.",
              "- UI: enable `persistAuthorization`, set `tagsSorter/operationsSorter='alpha'`, and expose `/openapi.json`."
            ].join("\n");


            const guide = [shared, rnGuide, sbGuide, faGuide, nestGuide].filter(Boolean).join("\n\n");

            // 3) 모델 선택(레이블에 deep 라벨 있으면 상향)
            const labels = (pr.labels || []).map(l => l.name);
            const deep = labels.includes(process.env.DEEP_LABEL || "ai:deep");
            const model = deep ? (process.env.MODEL_ESCALATE || "gpt-4.1") : (process.env.MODEL_DEFAULT || "gpt-4.1-mini");

            // 4) 프롬프트 준비
            const system = [
              "You are a senior engineer performing a strict but helpful PR review.",
              "Return sections: 1) Summary 2) Major issues (with suggested diffs) 3) Minor nits 4) Tests 5) Security/Performance.",
              "Comment **only** on changed hunks. Be concise and actionable."
            ].join("\n");

            const user = [
              `Repo: ${owner}/${repo}`,
              `PR #${pull_number} | ${pr.title}`,
              ``,
              guide,
              ``,
              `### PR Description`,
              `${pr.body || "(no description)"}`,
              ``,
              `### Changed hunks`,
              diffs.join("\n\n")
            ].join("\n");

            // 5) OpenAI 호출
            if (!process.env.OPENAI_API_KEY) {
              core.setFailed("OPENAI_API_KEY secret이 없습니다.");
              return;
            }

            const res = await fetch("https://api.openai.com/v1/chat/completions", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                model,
                messages: [
                  { role: "system", content: system },
                  { role: "user", content: user }
                ]
              })
            });

            if (!res.ok) {
              const errTxt = await res.text();
              core.setFailed(`OpenAI API error: ${res.status} ${errTxt}`);
              return;
            }
            const data = await res.json();
            const text = data.choices?.[0]?.message?.content || "AI reviewer produced no output.";

            // 6) 리뷰 코멘트 게시(단일 요약)
            const body = `### 🤖 AI Code Review (${model})\n\n${text}`.slice(0, 65000);
            await github.rest.pulls.createReview({
              owner, repo, pull_number,
              event: "COMMENT",
              body
            });
            core.info("AI review posted.");
