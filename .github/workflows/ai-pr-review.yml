name: Reusable PR AI Review

on:
  workflow_call:
    inputs:
      model:
        description: "Í∏∞Î≥∏ Î™®Îç∏"
        required: false
        type: string
        default: "gpt-4.1-mini"
      run_on_fork:
        description: "Ìè¨ÌÅ¨ PRÏóêÏÑúÎèÑ Ïã§Ìñâ"
        required: false
        type: boolean
        default: false
      max_patch_per_file:
        description: "ÌååÏùºÎãπ patch ÏµúÎåÄ Í∏∏Ïù¥(Î¨∏Ïûê)"
        required: false
        type: number
        default: 12000

permissions:
  contents: read
  pull-requests: write

jobs:
  guard-fork:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.head.repo.fork && inputs.run_on_fork == false }}
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "üîí Î≥¥ÏïàÏÉÅ Ìè¨ÌÅ¨ PRÏóêÏÑúÎäî AI ÏΩîÎìúÎ¶¨Î∑∞Í∞Ä ÏûêÎèô Ïã§ÌñâÎêòÏßÄ ÏïäÏäµÎãàÎã§. ÌïÑÏöî Ïãú MaintainerÍ∞Ä ÎÇ¥Î∂Ä Î∏åÎûúÏπòÏóêÏÑú Ïû¨Ïò§ÌîàÌïòÍ±∞ÎÇò `run_on_fork: true`Î°ú Ìò∏Ï∂úÌïòÏÑ∏Ïöî."
            });

  review:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ !(github.event.pull_request.head.repo.fork && inputs.run_on_fork == false) }}
    concurrency:
      group: ${{ github.repository }}-ai-review-pr-${{ github.event.pull_request.number }}
      cancel-in-progress: true
    steps:
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: AI Review (summary comment)
        uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL_DEFAULT: ${{ inputs.model }}
          MAX_PATCH_PER_FILE: ${{ inputs.max_patch_per_file }}
        with:
          script: |
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pull_number = pr.number;

            // 1) Î≥ÄÍ≤Ω ÌååÏùº Î™©Î°ù(+patch) ÏàòÏßë
            const files = await github.paginate(github.rest.pulls.listFiles, { owner, repo, pull_number });
            const maxPerFile = Number(process.env.MAX_PATCH_PER_FILE || 12000);
            const binRe = /\.(png|jpg|jpeg|gif|svg|webp|mp4|mov|mp3|wav|zip|tgz|gz|pdf|ico)$/i;
            const lockRe = /(package-lock\.json|pnpm-lock\.yaml|yarn\.lock)$/i;

            const diffs = [];
            let rn=false, sb=false, fa=false;

            for (const f of files) {
              const path = (f.filename || "").toLowerCase();
              if (binRe.test(path) || lockRe.test(path)) continue;
              if (!f.patch) continue;

              if (/\.(tsx|jsx|ts|js)$/.test(path) || path.startsWith("android/") || path.startsWith("ios/")) rn = true;
              if (/\.(java|kt|xml)$/.test(path) || /(pom\.xml|build\.gradle(\.kts)?$)/.test(path) || path.includes("src/main/")) sb = true;
              if (/\.py$/.test(path) || /(requirements\.txt|pyproject\.toml)$/.test(path)) fa = true;

              const patch = String(f.patch).slice(0, maxPerFile);
              diffs.push(`# ${f.filename}\n\`\`\`diff\n${patch}\n\`\`\``);
            }

            if (diffs.length === 0) {
              await github.rest.issues.createComment({
                owner, repo, issue_number: pull_number,
                body: "‚ÑπÔ∏è Î≥ÄÍ≤ΩÎêú ÏΩîÎìú Ìå®ÏπòÍ∞Ä ÏóÜÍ±∞ÎÇò(ÎòêÎäî Ï†ÑÎ∂Ä Î¨¥ÏãúÎê®) Î¶¨Î∑∞Í∞Ä ÏÉùÎûµÎêòÏóàÏäµÎãàÎã§."
              });
              return;
            }

            // 2) Ïä§ÌÉùÎ≥Ñ Í∞ÄÏù¥Îìú Í≤∞Ìï©
            const shared = [
              "- Î†àÌè¨Ïùò ÏΩîÎî© Í∑úÏπôÏùÑ Îî∞Î•¥ÏÑ∏Ïöî. Î≥¥Ïïà/Î°úÍ∑∏(PII)/ÏóêÎü¨Ï≤òÎ¶¨/ÎèôÏãúÏÑ± Ïù¥Ïäà Ïö∞ÏÑ†.",
              "- Ï§ëÏöî/Î≥¥ÌÜµ/ÏÇ¨ÏÜå 3Îã®Í≥ÑÎ°ú Ïù¥ÏäàÎ•º ÎÇòÎàÑÍ≥†, Í∞ÄÎä•ÌïòÎ©¥ **ÏΩîÎìú diff Ï†úÏïà**ÏùÑ ÎèôÎ∞òÌïòÏÑ∏Ïöî.",
            ].join("\n");

            const rnGuide = rn ? [
              "### React Native Í∞ÄÏù¥Îìú",
              "- hooks ÏùòÏ°¥ÏÑ±/ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏïàÏ†ÑÏÑ±, FlatList/Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò Ï†êÍ≤Ä",
              "- ÎÑ§Ìä∏ÏõåÌÅ¨ Ï∑®ÏÜå/Ïû¨ÏãúÎèÑ, Ïù¥ÎØ∏ÏßÄ/Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ, Í∂åÌïú/ÌîåÎû´Ìèº Î∂ÑÍ∏∞ ÌôïÏù∏",
            ].join("\n") : "";

            const sbGuide = sb ? [
              "### Spring Boot Í∞ÄÏù¥Îìú",
              "- Controller/Service/Repository Í≤ΩÍ≥Ñ, Ìä∏ÎûúÏû≠ÏÖò Ï†ÑÌåå¬∑Í≤©Î¶¨, @Valid Í≤ÄÏ¶ù",
              "- ÏòàÏô∏ ‚Üí ÏùºÍ¥ÄÎêú ÏóêÎü¨ ÏùëÎãµ, N+1/Lazy Î°úÎî©, ÌÉÄÏûÑÏïÑÏõÉ/ÏÑúÌÇ∑Î∏åÎ†àÏù¥Ïª§",
              "- Ïù∏Ï¶ù/Ïù∏Í∞Ä, ÎØºÍ∞ê Î°úÍ∑∏ Í∏àÏßÄ, ÌîÑÎ°úÌååÏùºÎ≥Ñ ÏÑ§Ï†ï Î∂ÑÎ¶¨",
            ].join("\n") : "";

            const faGuide = fa ? [
              "### FastAPI Í∞ÄÏù¥Îìú",
              "- Pydantic Ïä§ÌÇ§Îßà¬∑ÌÉÄÏûÖÌûåÌä∏, Depends ÏùòÏ°¥ÏÑ± Ï£ºÏûÖ, ÎπÑÎèôÍ∏∞ Ï†ÅÌï©ÏÑ±",
              "- ÏòàÏô∏ Ìï∏Îì§Îü¨¬∑ÏùëÎãµ Î™®Îç∏ ÌÜµÏùº, CORS/Î≥¥Ïïà Ìó§Îçî, DB ÏÑ∏ÏÖò/Ïª§ÎÑ•ÏÖò Í¥ÄÎ¶¨",
              "- Î∞±Í∑∏ÎùºÏö¥Îìú ÌÉúÏä§ÌÅ¨/ÌÉÄÏûÑÏïÑÏõÉ¬∑Ïì∞Î†àÎìú/ÌîÑÎ°úÏÑ∏Ïä§ÌíÄ",
            ].join("\n") : "";

            const guide = [shared, rnGuide, sbGuide, faGuide].filter(Boolean).join("\n\n");

            // 3) Î™®Îç∏ ÏÑ†ÌÉù(Î†àÏù¥Î∏îÏóê deep ÎùºÎ≤® ÏûàÏúºÎ©¥ ÏÉÅÌñ•)
            const labels = (pr.labels || []).map(l => l.name);
            const deep = labels.includes(process.env.DEEP_LABEL || "ai:deep");
            const model = deep ? (process.env.MODEL_ESCALATE || "gpt-4.1") : (process.env.MODEL_DEFAULT || "gpt-4.1-mini");

            // 4) ÌîÑÎ°¨ÌîÑÌä∏ Ï§ÄÎπÑ
            const system = [
              "You are a senior engineer performing a strict but helpful PR review.",
              "Return sections: 1) Summary 2) Major issues (with suggested diffs) 3) Minor nits 4) Tests 5) Security/Performance.",
              "Comment **only** on changed hunks. Be concise and actionable."
            ].join("\n");

            const user = [
              `Repo: ${owner}/${repo}`,
              `PR #${pull_number} | ${pr.title}`,
              ``,
              guide,
              ``,
              `### PR Description`,
              `${pr.body || "(no description)"}`,
              ``,
              `### Changed hunks`,
              diffs.join("\n\n")
            ].join("\n");

            // 5) OpenAI Ìò∏Ï∂ú
            if (!process.env.OPENAI_API_KEY) {
              core.setFailed("OPENAI_API_KEY secretÏù¥ ÏóÜÏäµÎãàÎã§.");
              return;
            }

            const res = await fetch("https://api.openai.com/v1/chat/completions", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                model,
                messages: [
                  { role: "system", content: system },
                  { role: "user", content: user }
                ]
              })
            });

            if (!res.ok) {
              const errTxt = await res.text();
              core.setFailed(`OpenAI API error: ${res.status} ${errTxt}`);
              return;
            }
            const data = await res.json();
            const text = data.choices?.[0]?.message?.content || "AI reviewer produced no output.";

            // 6) Î¶¨Î∑∞ ÏΩîÎ©òÌä∏ Í≤åÏãú(Îã®Ïùº ÏöîÏïΩ)
            const body = `### ü§ñ AI Code Review (${model})\n\n${text}`.slice(0, 65000);
            await github.rest.pulls.createReview({
              owner, repo, pull_number,
              event: "COMMENT",
              body
            });
            core.info("AI review posted.");
